-1 Crear Usuario
php bin/console make:user
----Cliente
----yes
----username
----yes

-2 Crear Entidad Pedido
php bin/console make:entity
----Pedido
----no
----fecha
----date
----no
----cliente
----relation
----Cliente
----ManyToOne
----enter
----enter
----enter
----enter

-3 Añadir articulo
php bin/console make:entity
----Articulo
----enter
----nombre
----enter
----enter
----enter
----precio
----float
----enter
----enter

-4 actualizar user
php bin/console make:entity
----Cliente
----administrador
----boolean
----enter
----nombre_apellidos
----enter
----enter
----enter

-5 Crear entidad detalles pedidos
php bin/console make:entity
----lineaPedido
----enter
----cantidad
----integer
----enter
----pedido
----ManyToOne
----Pedido
----no
----enter
----enter
----enter
----articulo
----ManyToOne
----Articulo
----no
----no
----enter


-6 Migracion
modificamos el .env
Cambiamos el comando
# DATABASE_URL="mysql://root:@127.0.0.1:3306/Carrito?serverVersion=8.0.32&charset=utf8mb4"

php bin/console doctrine:database:create
php bin/console make:migration
php bin/console doctrine:migrations:migrate

-7 Login
php bin/console make:security:form-login
----enter
----enter
----enter

en el securiry.yaml cambiamos la ruta que tiene

-7 Registro
php bin/console make:registration-form
----enter
----no
----enter
----enter


Modificamos el RegistratonFormType

 public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username')
            ->add('administrador', CheckboxType::class)
            ->add('plainPassword', PasswordType::class, [
                // instead of being set onto the object directly,
                // this is read and encoded in the controller
                'mapped' => false,
                'attr' => ['autocomplete' => 'new-password'],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a password',
                    ]),
                    new Length([
                        'min' => 6,
                        'minMessage' => 'Your password should be at least {{ limit }} characters',
                        // max length allowed by Symfony for security reasons
                        'max' => 4096,
                    ]),
                ],
            ])
            ->add("nombre_apellidos", TextType::class, ["label" => "Nombre Apellidos"])
        ;
    }

security yaml



php bin/console make:controller
----Pedidos


Hacemos el redireccionamiento del login o registro a la app de pedidos

form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_pedidos



Para llamar a un dato del cliente, hay que asegurarse como se llama en la entidad
Hacemos la tabla de pedidos

	<div class="example-wrapper">
		<h1>Hola
			{{ app.user.NombreApellidos }}! ✅</h1>

		<h1>{{ titulo }}</h1>

		<table>
			{% for pedido in app.user.Pedidos %}
				<tr>
					<td>{{ pedido.id }}</td>
					<td>{{ pedido.fecha }}</td>
				</tr>
			{% endfor %}
		</table>


		<div>
			<button>
				<a href="{{path('app_logout')}}" ;>Salir</a>
			</button>
		</div>


	</div>
{% endblock %}


Cambiar tipo de dato a date, dandole un formato
<td>{{ pedido.fecha|date('Y-m-d H:i:s ') }}</td>

Bootstrap, esto va en twig.base del proyecto

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

php bin/console make:form
---FormPedido
---Pedido

 public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('fecha', null, [
                'widget' => 'single_text',
            ])
            ->add('agregar', SubmitType::class,  ['label' => "Añadir pedido"])
            // ->add('cliente', EntityType::class, [
            //     'class' => Cliente::class,
            //     'choice_label' => 'id',
            // ])
        ;
    }

php bin/console make:form
---FormLineaPedido
---LineaPedido

 $builder
            ->add('cantidad')
            // ->add('pedido', EntityType::class, [
            //     'class' => Pedido::class,
            //     'choice_label' => 'id',
            // ])
            ->add('articulo', EntityType::class, [
                'class' => Articulo::class,
                'choice_label' => 'nombre',
            ])
            ->add('agregar', SubmitType::class, ['label' => 'Añadir linea de articulos'])
        ;
    }

crear nuevopedido.html.twig a mano mismo
crear addLinea.html.twig a mano mismo


Pedidos Controller
#[Route('/pedidos/nuevo', name: 'app_nuevo_pedido')]
    public function nuevoPedido(Request $request, EntityManagerInterface $em): Response
    {
        $pedido = new Pedido();
        $form = $this->createForm(FormPedidoType::class, $pedido);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $pedido->setCliente($this->getUser());
            // Grabamos el pedido
            $em->persist($pedido);
            $em->flush();

            // Redirigimos a la página donde añadir las líneas
            return $this->redirectToRoute('app_add_linea_pedido', ['id' => $pedido->getId()]);
        }

        return $this->render("pedidos/nuevopedido.html.twig", [
            'form' => $form->createView(),
        ]);
    }

    #[Route('/pedidos/{id}/add-linea', name: 'app_add_linea_pedido')]
    public function addLineaPedido(Pedido $pedido, Request $request, EntityManagerInterface $em): Response
    {
        $lineaPedido = new LineaPedido();
        $formLineaPedido = $this->createForm(FormLineaPedidoType::class, $lineaPedido);
        $formLineaPedido->handleRequest($request);

        if ($formLineaPedido->isSubmitted() && $formLineaPedido->isValid()) {
            $lineaPedido->setPedido($pedido);
            $em->persist($lineaPedido);
            $em->flush();

            // Redirigir a la vista del pedido o a otra página
            return $this->redirectToRoute('app_ver_pedido', ['id' => $pedido->getId()]);
        }

        return $this->render("pedidos/addLinea.html.twig", [
            'pedido' => $pedido,
            'form' => $formLineaPedido->createView(),
        ]);
    }















    