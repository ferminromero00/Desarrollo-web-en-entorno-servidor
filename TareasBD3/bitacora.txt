Id tomando nota de cada paso pero tenéis que acabarlo en una hora para poder continuar con los apartados 18 en adelante.

Vamos a prescindir de make:crud

//HECHO
Crea una aplicación de nombre TareasBD3.
Crea las entidades: usuario y tareas relacionándolas entre sí.
--> primero hacemos el user para luego relacionarla automaticamente con tareas

Las tareas tienen una fecha de inicio y otra de fin.
--> simplemente añadirle mas campos con el tipo datetime

Los usuarios tienen nombre, apellidos y fecha de nacimiento.
--> lo creamos con make:user, y luego con make:entity, ponemos el mismo nombre que el usuario y lo actualizamos con nuevos campos

Crea la base de datos  Tareas3.
Migra las entidades.
--> 
php bin/console doctrine:database:create
php bin/console make:migration
php bin/console doctrine:migrations:migrate

Crea un formulario de login y otro de registro.
-->
//CREAR LOGIN
php bin/console make:security:form-login
    >Controler class (default)
    >Logout (deafult)
    >phpunit  (default)
TERMINADO


//CREAR REGISTRO
php bin/console make:registration-form
    >Quieres añadir una validacion para asegurar que no haya duplicados (si defautl)
    >email de verificacion? (no)
    >Quieres autentificar despues de registrarte? (si)
    >Donde quieres redirigir al usuario? (2) //no te sale si tienes ya creado el login
    >php-unit test? (no)
terminado

El formulario de login se enxuentra en la ruta /
--> modificar el security controller --> #[Route(path: '/', name: 'app_login')]

Al formulario de registro se accede a través de un enlace en la página de login.
-->
<button>
	<a href="{{path('app_register')}}" ;>Registrarse</a>
</button>

Después del registro nos redirigimos a la página de login.
--> simplemente con tener el / como path del login de hace automaticamente

Crea un controlador de nombre Tareas (aparte del controlador nos crea una página 
templates/tareas/index.html.twig que será nuestra página de gestión de tareas).
-->php bin/console make:controller Tareas

Redirige el login con éxito a la página de gestión de tareas.
-->
config/packages/security.yml
form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_tareas

cambiamos el default target por el nombre de la app que se encuentra en el controlador

Muestra el nombre del usuario en la página de gestión de tareas.
-->
    <h1>Hola {{ app.user.username }}</h1>

Con esto cogemos automaticamente el nombre de la sesion del usuario, y le saludamos

Muestra un enlace en la página de gestión de tareas para cerrar la sesión.
-->Añadimos esto al index de las tareas
<div>
	<button>
		<a href="{{path('app_logout')}}" ;>Cerrar Sesion</a>
	</button>
</div>

Crea una clase formulario para la entidad Tarea.
-->php bin/console make:form (por hacer)

Añadir formulario al index de tareas

Primero modificamos el tareasController, creando un formulario para pasarlo al index
Añade un botón submit al formulario. 
-->
-->

 public function index(Request $request, EntityManagerInterface $entityManager): Response
    {
        $tarea = new Tarea();
        $form = $this->createForm(TareaFormularioType::class, $tarea);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($tarea);
            $entityManager->flush();

            return $this->redirectToRoute('tareas_index');
        }

        $tareas = $entityManager->getRepository(Tarea::class)->findAll();

        return $this->render('tareas/index.html.twig', [
            'form' => $form->createView(),
            'tareas' => $tareas,
        ]);
    }

Asi enseñamos el formulario, creandole un boton para mandarlo

<h2>Crear Nueva Tarea</h2>
		{{ form_start(form) }}
		{{ form_row(form.titulo) }}
		{{ form_row(form.FechaInicio) }}
		{{ form_row(form.FechaFin) }}
		{{ form_row(form.Usuario) }}
		<button type="submit" ">Guardar</button>
		{{ form_end(form) }}

Al pulsar "Añadir" debe añadirse la tarea a la base de datos.
-->
Se añade correctamente a la base de datos

Muestra en la página de tareas todas las tareas añadidas.
-->
<h2>Lista de Tareas</h2>
		<ul>
			{% for tarea in tareas %}
				<li>Nombre: {{ tarea.titulo }} <br> Fecha de Inicio:
					{{ tarea.FechaInicio|date('Y-m-d H:i') }} <br> Fecha de Fin:
					{{ tarea.FechaFin|date('Y-m-d H:i') }}
				</li>
				<br>
			{% endfor %}
		</ul>

Añade a cada tarea un enlace para editar y otro para borrar. 
-->

Este es el index, donde podremos los botones, luego en el controler ponemos la funcionalidad

<h2>Lista de Tareas</h2>
		<ul>
			{% for tarea in tareas %}
				<li>
					Nombre:
					{{ tarea.titulo }}
					<br>
					Fecha de Inicio:
					{{ tarea.FechaInicio|date('Y-m-d H:i') }}
					<br>
					Fecha de Fin:
					{{ tarea.FechaFin|date('Y-m-d H:i') }}
					<br>
					<a href="{{ path('tareas_edit', {id: tarea.id}) }}">Editar</a>
					<a href="{{ path('tareas_delete', {id: tarea.id}) }}">Borrar</a>
				</li>
				<br>
			{% endfor %}
		</ul>

Este es el archivo del controller

<?php
// src/Controller/TareasController.php

namespace App\Controller;

use App\Entity\Tarea;
use App\Form\TareaFormularioType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class TareasController extends AbstractController
{
    #[Route('/tareas', name: 'app_tareas')]
    public function index(Request $request, EntityManagerInterface $entityManager): Response
    {
        $tarea = new Tarea();
        $form = $this->createForm(TareaFormularioType::class, $tarea);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($tarea);
            $entityManager->flush();

            return $this->redirectToRoute('app_tareas');
        }

        $tareas = $entityManager->getRepository(Tarea::class)->findAll();

        return $this->render('tareas/index.html.twig', [
            'form' => $form->createView(),
            'tareas' => $tareas,
        ]);
    }

    #[Route('/tareas/edit/{id}', name: 'tareas_edit')]
    public function edit(Request $request, Tarea $tarea, EntityManagerInterface $entityManager): Response
    {
        $form = $this->createForm(TareaFormularioType::class, $tarea);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->flush();

            return $this->redirectToRoute('app_tareas');
        }

        return $this->render('tareas/edit.html.twig', [
            'form' => $form->createView(),
            'tarea' => $tarea,
        ]);
    }

    #[Route('/tareas/delete/{id}', name: 'tareas_delete')]
    public function delete(Tarea $tarea, EntityManagerInterface $entityManager): Response
    {
        $entityManager->remove($tarea);
        $entityManager->flush();

        return $this->redirectToRoute('app_tareas');
    }
}


Se ven las tareas de cada usuario, se diferencias no se ven todas
-->
Descomentamos TareasRepository

Comentamos estas lineas del controler, no le pasamos las tareas lo hace el solo, y pasa solo las del usuario

//$tareas = $entityManager->getRepository(Tarea::class)->findAll();

        //$tareas = $tr->findByExampleField($this->getUser()->getId());

        return $this->render('tareas/index.html.twig', [
            'form' => $form->createView(),
            //'tareas' => $tareas,
        ]);

y con esto en index de tareas hacemos este for

{% for tarea in app.user.Tareas %}
				<li>
					Nombre:
					{{ tarea.titulo }}
					<br>
					Fecha de Inicio:
					{{ tarea.FechaInicio|date('Y-m-d H:i') }}
					<br>
					Fecha de Fin:
					{{ tarea.FechaFin|date('Y-m-d H:i') }}
					<br>
					<a href="{{ path('tareas_edit', {id: tarea.id}) }}">Editar</a>
					<a href="{{ path('tareas_delete', {id: tarea.id}) }}">Borrar</a>
				</li>
				<br>
			{% endfor %}






Añade un menú a la aplicación con estas opciones: Mi cuenta: Editar Cerrar
Grupos: permite agrupar usuarios en grupos, de manera que al crear la tarea indiquemos a que grupo va dirigido.
-->






