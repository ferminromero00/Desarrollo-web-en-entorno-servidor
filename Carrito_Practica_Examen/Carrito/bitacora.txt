PRACTICA EXAMEN

1-Crear entidades: 

Usuario hace N pedidos que están compuestos de M líneas de pedido con un artículo por línea
Usuario: username, passord, nombre y apellidos, administrador (si/no), colección de pedidos

php bin/console make:user
----Cliente
----yes
----username
----yes

Añadimos el usuario Cliente, y luego lo actualizamos

php bin/console make:entity
----Cliente
----administrador
----boolean
----enter
----nombre_apellidos
----enter
----enter
----enter
----enter


Crear la entidad Articulo

php bin/console make:entity
----Articulo
----enter
----nombre
----enter
----enter
----enter
----precio
----float
----enter
----enter



Crear pedido, hacemon la coleccion de pedidos entre pedido(N) y cliente(1) 
Pedido: id, fecha, usuario, colección de lineas de pedido

php bin/console make:entity
----Pedido
----no
----fecha
----date
----no
----cliente
----ManyToOne
----Cliente
----enter
----enter
----enter
----enter

Crear LineasPedido, con una coleccion de lineas de pedido de Pedido(1) y LineaPedido(N)
y Articulo(1) y LineaPedido(N)

Líneas de pedido: id, articulo, cantidad, pedido

php bin/console make:entity
----lineaPedido
----enter
----cantidad
----integer
----enter
----pedido
----ManyToOne
----Pedido
----no
----enter
----enter
----enter
----articulo
----ManyToOne
----Articulo
----no
----no
----enter

--HACEMOS LA MIGRACION

modificamos el .env
Cambiamos el comando
# DATABASE_URL="mysql://root:@127.0.0.1:3306/Carrito?serverVersion=8.0.32&charset=utf8mb4"

php bin/console doctrine:database:create
php bin/console make:migration
php bin/console doctrine:migrations:migrate


-- HACER LOGIN Y REGISTER

php bin/console make:security:form-login
----enter
----enter
----enter

php bin/console make:registration-form
----enter
----no
----enter
----enter



-- CAMBIAR PATH DEL SYMFONY, Vamos a SecurityController y cambiamos esto

#[Route(path: '/', name: 'app_login')]


-- AÑADIR BOTON PARA IR A DIFERENTES RUTAS

<button><a href="{{path('app_logout')}}" ;>Salir</a></button>

-- CREAR INDEX DE NUESTRA APP DE PEDIDOS

php bin/console make:controller
----Pedidos



-- REDIRECCIONAMIENTO DE CUANDO HACEMOS EL LOGIN A LA APP DE PEDIDOS

Hacemos el redireccionamiento del login o registro a la app de pedidos, lo añadimos en security.yml

form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_pedidos


-- RECOGER NOMBRE EL USUARIO LOGEADO

<h1>Hola {{ app.user.NombreApellidos }}</h1>


-- MODIFICAR EL REGISTRO, Y AÑADIR LOS CAMPOS QUE NOSOTROS AÑADIMOS AL USUARIO

->add("administrador", CheckboxType::class, ["required" => false])
->add("NombreApellidos", TextType::class)
->add('plainPassword', PasswordType::class)


-- CREAR TABLA DE PEDIDOS DEL USUARIO

Esto lo podemos hacer gracias a que en la ENTIDAD CLIENTE, estan relacionados los Pedidos
asi que podemos cogerlos directamente con app.user.Pedidos

Esto es, cogemos Pedidos y funcionaria: (public function getPedidos(): Collection)

<table>
    {% for pedido in app.user.Pedidos %}
	    <tr>
			<td>{{ pedido.id }}</td>
			<td>{{ pedido.fecha|date('Y-m-d H:i:s ') }}</td>
	    </tr>
	{% endfor %}
</table>


-- FORMATO FECHAS

<td>{{ pedido.fecha|date('Y-m-d H:i:s ') }}</td>


-- AÑADIR ESTILOS CON BOOTSTRAP

Bootstrap, esto va en twig.base del proyecto

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

clase tabla: class="table table-striped table-hover"

-- PASAR EL ID EN LA DATABASE_URL
{{ path('app_ver_pedidos', {'id': pedido.id}) }}


-- HACER UN RENDER DE UNA PAGINA HTML, AL PULSAR
return $this->render('ruta/pagina.html.twig' , ['parametro' => $parametro,]);

-- SI QUEREMOS AÑADIR MAS PEDIDOS, DEBEMOS HACER UN FORM PARA ESO, ASI QUE TENEMOS QUE CREARLO

php bin/console make:form
---FormPedido (nombre del form)
---Pedido (nombre de la entidad a la que se relaciona)

$builder
    ->add('fecha', null, [
        'widget' => 'single_text',
    ])
    ->add('agregar', SubmitType::class,  ['label' => "Añadir pedido"])
    ;

modificamos un poco el builder del formulario


#[Route('/pedidos/nuevo', name: 'app_nuevo_pedido')]
    public function pedidoNuevo(Request $request, EntityManagerInterface $em): Response
    {
        //CREAR NUEVO PEDIDO
        $pedido = new Pedido();
        //CREAMOS EL FORMULARIO CON EL COMANDO QUE HICIMOS ANTES
        $form = $this->createForm(FormPedidoType::class, $pedido);
        //MANEJAMOS LA RESPUESTA DEL FORMULARIO
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // EN EL BUILDER QUITAMOS EL ID YA QUE LO PONDREMOS AUTOMATICAMENTE AQUI
            $pedido->setCliente($this->getUser());
            // Grabamos el pedido
            $em->persist($pedido);
            //LO SUBIMOS A LA BASE DE DATOS
            $em->flush();

            // Redirigimos a la página donde añadir las líneas
            return $this->redirectToRoute('app_add_linea_pedido', ['id' => $pedido->getId()]);
        }

        //ESTA ES LA PAGINA QUE PINTAMOS PARA HACER EL FORMULARIOM, LE PASAMOS EL FORM
        return $this->render("pedidos/nuevopedido.html.twig", [
            'form' => $form,
        ]);
    }

EN EL nuevopedido.html.twig SOLO TENEMOS QUE PONER ESTO   {{ form(form) }}
Y SE PINTA EL FORMULARIO ENTERO, YA LO DEMAS QUE QUERAMOS AÑADIR...


-- DESPUES DE CREAR EL PEDIDO AÑADIMOS SU CONTENIDOR CON LA OTRA ENTIDAD ASI

Creamos otro form para lineapedido

php bin/console make:form
---FormLineaPedido
---LineaPedido

// Campo para la cantidad
->add('cantidad')
// Campo para seleccionar un artículo
->add('articulo', EntityType::class, [
    'class' => Articulo::class, // Clase de la entidad Articulo
    'choice_label' => 'nombre', // Propiedad de la entidad que se mostrará en las opciones
])
// Botón de envío del formulario
->add('agregar', SubmitType::class, ['label' => 'Añadir linea de articulos']);


-- AHORA VAMOS AÑADIR EL CONTENIDO AL PEDIDO, CON LOS ARTICULOS QUE HAYA DISPONIBLES








    #[Route('/pedidos/{id}/add-linea', name: 'app_add_linea_pedido')]
    public function addLineaPedido(Pedido $pedido, Request $request, EntityManagerInterface $em): Response
    {
        $lineaPedido = new LineaPedido();
        $formLineaPedido = $this->createForm(FormLineaPedidoType::class, $lineaPedido);
        $formLineaPedido->handleRequest($request);

        if ($formLineaPedido->isSubmitted() && $formLineaPedido->isValid()) {
            $lineaPedido->setPedido($pedido);
            $em->persist($lineaPedido);
            $em->flush();

            // Redirigir a la vista del pedido o a otra página
            return $this->redirectToRoute('app_ver_pedido', ['id' => $pedido->getId()]);
        }

        return $this->render("pedidos/addLinea.html.twig", [
            'pedido' => $pedido,
            'form' => $formLineaPedido->createView(),
        ]);
    }















    







